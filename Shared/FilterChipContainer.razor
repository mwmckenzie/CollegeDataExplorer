@using CollegeDataExplorer.Services
@using CollegeDataExplorer.Enums

@inject DataStateService dataStateService
@inject ProgramDataService programDataService


<MudPaper Style="padding: 15px">
    
    @if (selected != null) {
        <div class="d-flex flex-column align-center">
            <MudText>
                You selected <MudText Color="@selected.Color" Inline="true">@selected.Text</MudText>.
            </MudText>
        </div>
    }
    
    <MudChipSet @bind-SelectedChip="selected" Filter="true" Mandatory="@mandatory">
        @foreach (var filter in _filters) {
            <MudChip Text="@filter" Color="Color.Primary"
                     OnClick="@(e => dataStateService.selectedFilter = filter)">@filter</MudChip>
        }
    </MudChipSet>
    
</MudPaper>


@code {
    
    [Parameter]
    public string str { get; set; } = "on";

    [Parameter] 
    public FilterType filterType { get; set; }
    
    private List<string> _filters = new();
    
    private bool mandatory = true;
    private MudChip selected;

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        await LoadFilterListAsync();
    }

    private async Task LoadFilterListAsync() {
        switch (filterType) {
            case FilterType.Subject:
                _filters = programDataService.subjects.ToList();
                break;
            case FilterType.Topic:
                _filters = programDataService.topics.ToList();
                break;
            case FilterType.ProgramType:
                _filters = programDataService.programTypes.ToList();
                break;
            case FilterType.Tag:
                _filters = programDataService.tags.ToList();
                break;
            case FilterType.Org:
                break;
            case FilterType.State:
                break;
            case FilterType.Residence:
                break;
            case FilterType.Citizenship:
                break;
            default:
                break;
        }
    }
    
    // private void OnFilterValueChanged() {
    //     switch (filterType) {
    //         case FilterType.Subject:
    //             _filters = programDataService.subjects.ToList();
    //             break;
    //         case FilterType.Topic:
    //             _filters = programDataService.topics.ToList();
    //             break;
    //         case FilterType.ProgramType:
    //             _filters = programDataService.programTypes.ToList();
    //             break;
    //         case FilterType.Tag:
    //             _filters = programDataService.tags.ToList();
    //             break;
    //         case FilterType.Org:
    //             break;
    //         case FilterType.State:
    //             break;
    //         case FilterType.Residence:
    //             break;
    //         case FilterType.Citizenship:
    //             break;
    //         default:
    //             break;
    //     }
    // }

}